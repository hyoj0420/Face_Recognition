import socket
import cv2
import numpy as np
import time
#socket에서 수신한 버퍼를 반환하는 함수
def recvall(sock, count):
    # 바이트 문자열
    buf = b''
    while count:
        newbuf = sock.recv(count)
        if not newbuf: return None
        buf += newbuf
        count -= len(newbuf)
    return buf
 
HOST='192.168.0.18'
PORT=8000
PATH = "C:/Users/"
#TCP 사용
s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
print('Socket created')
 
#서버의 아이피와 포트번호 지정
s.bind((HOST,PORT))
print('Socket bind complete')
# 클라이언트의 접속을 기다린다. (클라이언트 연결을 10개까지 받는다)
s.listen(10)
print('Socket now listening')
 
#연결, conn에는 소켓 객체, addr은 소켓에 바인드 된 주소
conn,addr=s.accept()
i =0
while True:
    # client에서 받은 stringData의 크기 (==(str(len(stringData))).encode().ljust(16))
    print("receving")
    filename = conn.recv(4)
    length = recvall(conn, 12)
    #name = recvall(conn, 8)
    stringData = recvall(conn, int(length))
    #name = recvall(conn, )
    data = np.fromstring(stringData, dtype = 'uint8')
    #data를 디코딩한다.
    frame = cv2.imdecode(data, cv2.IMREAD_COLOR)
    name = filename.decode()
    name_int = int(name)
    print(filename)
    print(length)

    #등록된 사람이 인식된 경우
    if(name_int // 1000 == 9) :
        name_int -= 9000
        #인식된 사람의 데이터 파일에 저장하는 코드
    #등록되지 않은 사람이 인식된 경우    
    elif (name_int // 1000 == 1) :
        name_int -= 1000
        #SVM 돌리는 코드
    else :
        print("Name Error!")
              
    print(name_int)
    cv2.imshow('ImageWindow',frame)
    cv2.imwrite(PATH+str(name_int)+str(time.time())+".jpg", frame)
    cv2.waitKey(1)
    i+=1
    
    #data를 디코딩한다.
